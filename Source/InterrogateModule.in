1409250807
2 2
3 LUI 4 jJ0G 3 LUI 
19
20 9 LUISprite 0 4 39 20 LUISprite::LUISprite 0 1 1 0
27
LUISprite::LUISprite(void);

21 7 set_pos 0 4 39 18 LUISprite::set_pos 0 1 2 18
// Setter / Getter
52
inline void LUISprite::set_pos(LPoint2f const &pos);

22 7 get_pos 0 4 39 18 LUISprite::get_pos 0 1 3 18
// Setter / Getter
42
inline LPoint2f &LUISprite::get_pos(void);

23 8 set_size 0 4 39 19 LUISprite::set_size 0 1 4 0
55
inline void LUISprite::set_size(LVector2f const &size);

24 8 get_size 0 4 39 19 LUISprite::get_size 0 1 5 0
56
inline LVector2f const &LUISprite::get_size(void) const;

25 18 set_texcoord_start 0 4 39 29 LUISprite::set_texcoord_start 0 1 6 0
75
inline void LUISprite::set_texcoord_start(LVector2f const &texcoord_start);

26 18 get_texcoord_start 0 4 39 29 LUISprite::get_texcoord_start 0 1 7 0
54
inline LVector2f &LUISprite::get_texcoord_start(void);

27 16 set_texcoord_end 0 4 39 27 LUISprite::set_texcoord_end 0 1 8 0
71
inline void LUISprite::set_texcoord_end(LVector2f const &texcoord_end);

28 16 get_texcoord_end 0 4 39 27 LUISprite::get_texcoord_end 0 1 9 0
52
inline LVector2f &LUISprite::get_texcoord_end(void);

29 9 set_color 0 4 39 20 LUISprite::set_color 0 1 10 0
58
inline void LUISprite::set_color(LVecBase4f const &color);

30 9 get_color 0 4 39 20 LUISprite::get_color 0 1 11 0
46
inline LVecBase4f &LUISprite::get_color(void);

31 11 set_texture 0 4 39 22 LUISprite::set_texture 0 1 12 0
49
inline void LUISprite::set_texture(Texture *tex);

32 11 get_texture 0 4 39 22 LUISprite::get_texture 0 1 13 0
51
inline Texture *LUISprite::get_texture(void) const;

33 11 set_z_index 0 4 39 22 LUISprite::set_z_index 0 1 14 0
50
inline void LUISprite::set_z_index(float z_index);

34 11 get_z_index 0 4 39 22 LUISprite::get_z_index 0 1 15 0
42
inline float LUISprite::get_z_index(void);

35 11 set_visible 0 4 39 22 LUISprite::set_visible 0 1 16 0
49
inline void LUISprite::set_visible(bool visible);

36 10 is_visible 0 4 39 21 LUISprite::is_visible 0 1 17 0
40
inline bool LUISprite::is_visible(void);

37 4 hide 0 4 39 15 LUISprite::hide 0 1 18 28
// Shortcuts for set_visible
34
inline void LUISprite::hide(void);

38 4 show 0 4 39 15 LUISprite::show 0 1 19 28
// Shortcuts for set_visible
34
inline void LUISprite::show(void);

19
1 14 Dtool_jJ0G0beO 0 7 3 41 0 14 Dtool_jJ0G0beO 0 0 
2 14 Dtool_jJ0GTnVb 0 4 4 45 0 14 Dtool_jJ0GTnVb 18 // Setter / Getter 2 4 this 3 41  3 pos 1 42  
3 14 Dtool_jJ0Gs6Ij 0 6 5 46 0 14 Dtool_jJ0Gs6Ij 18 // Setter / Getter 1 4 this 3 41  
4 14 Dtool_jJ0GDSuu 0 4 6 45 0 14 Dtool_jJ0GDSuu 0 2 4 this 3 41  4 size 1 47  
5 14 Dtool_jJ0G_Emi 0 6 7 47 0 14 Dtool_jJ0G_Emi 0 1 4 this 3 50  
6 14 Dtool_jJ0GZPqC 0 4 8 45 0 14 Dtool_jJ0GZPqC 0 2 4 this 3 41  14 texcoord_start 1 47  
7 14 Dtool_jJ0Gmg_s 0 6 9 52 0 14 Dtool_jJ0Gmg_s 0 1 4 this 3 41  
8 14 Dtool_jJ0G1aLq 0 4 10 45 0 14 Dtool_jJ0G1aLq 0 2 4 this 3 41  12 texcoord_end 1 47  
9 14 Dtool_jJ0GbKPb 0 6 11 52 0 14 Dtool_jJ0GbKPb 0 1 4 this 3 41  
10 14 Dtool_jJ0GjsUJ 0 4 12 45 0 14 Dtool_jJ0GjsUJ 0 2 4 this 3 41  5 color 1 53  
11 14 Dtool_jJ0GZ92J 0 6 13 56 0 14 Dtool_jJ0GZ92J 0 1 4 this 3 41  
12 14 Dtool_jJ0GBbSG 0 4 14 45 0 14 Dtool_jJ0GBbSG 0 2 4 this 3 41  3 tex 1 57  
13 14 Dtool_jJ0GAHju 0 7 15 57 0 14 Dtool_jJ0GAHju 0 1 4 this 3 50  
14 14 Dtool_jJ0G0CvJ 0 4 16 45 0 14 Dtool_jJ0G0CvJ 0 2 4 this 3 41  7 z_index 1 59  
15 14 Dtool_jJ0GQj7I 0 6 17 59 0 14 Dtool_jJ0GQj7I 0 1 4 this 3 41  
16 14 Dtool_jJ0Gzi7K 0 4 18 45 0 14 Dtool_jJ0Gzi7K 0 2 4 this 3 41  7 visible 1 60  
17 14 Dtool_jJ0GCgZS 0 6 19 60 0 14 Dtool_jJ0GCgZS 0 1 4 this 3 41  
18 14 Dtool_jJ0Ga9z_ 0 4 20 45 0 14 Dtool_jJ0Ga9z_ 28 // Shortcuts for set_visible 1 4 this 3 41  
19 14 Dtool_jJ0GYuHT 0 4 21 45 0 14 Dtool_jJ0GYuHT 28 // Shortcuts for set_visible 1 4 this 3 41  
22
39 9 LUISprite 0 75777 9 LUISprite 9 LUISprite 0 0 0 1 20 0 0 18 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 0 0 1 0 40 0 0 0 0 0

40 14 ReferenceCount 0 2049 14 ReferenceCount 14 ReferenceCount 0 0 0 0 0 0 0 0 0 0 0 0 425
////////////////////////////////////////////////////////////////////
//       Class : ReferenceCount
// Description : A base class for all things that want to be
//               reference-counted.  ReferenceCount works in
//               conjunction with PointerTo to automatically delete
//               objects when the last pointer to them goes away.
////////////////////////////////////////////////////////////////////

41 11 LUISprite * 0 8576 11 LUISprite * 11 LUISprite * 0 0 39 0 0 0 0 0 0 0 0 0 0

42 16 LPoint2f const * 0 8576 16 LPoint2f const * 16 LPoint2f const * 0 0 43 0 0 0 0 0 0 0 0 0 0

43 14 LPoint2f const 0 8832 14 LPoint2f const 14 LPoint2f const 0 0 44 0 0 0 0 0 0 0 0 0 0

44 8 LPoint2f 0 2048 8 LPoint2f 8 LPoint2f 0 0 0 0 0 0 0 0 0 0 0 0 706
// Filename: lpoint2_src.h
// Created by:  drose (08Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//       Class : LPoint2
// Description : This is a two-component point in space.
////////////////////////////////////////////////////////////////////

45 4 void 0 8194 4 void 4 void 0 6 0 0 0 0 0 0 0 0 0 0 0

46 10 LPoint2f * 0 8576 10 LPoint2f * 10 LPoint2f * 0 0 44 0 0 0 0 0 0 0 0 0 0

47 17 LVector2f const * 0 8576 17 LVector2f const * 17 LVector2f const * 0 0 48 0 0 0 0 0 0 0 0 0 0

48 15 LVector2f const 0 8832 15 LVector2f const 15 LVector2f const 0 0 49 0 0 0 0 0 0 0 0 0 0

49 9 LVector2f 0 2048 9 LVector2f 9 LVector2f 0 0 0 0 0 0 0 0 0 0 0 0 707
// Filename: lvector2_src.h
// Created by:  drose (08Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//       Class : LVector2
// Description : This is a two-component vector offset.
////////////////////////////////////////////////////////////////////

50 17 LUISprite const * 0 8576 17 LUISprite const * 17 LUISprite const * 0 0 51 0 0 0 0 0 0 0 0 0 0

51 15 LUISprite const 0 8832 15 LUISprite const 15 LUISprite const 0 0 39 0 0 0 0 0 0 0 0 0 0

52 11 LVector2f * 0 8576 11 LVector2f * 11 LVector2f * 0 0 49 0 0 0 0 0 0 0 0 0 0

53 18 LVecBase4f const * 0 8576 18 LVecBase4f const * 18 LVecBase4f const * 0 0 54 0 0 0 0 0 0 0 0 0 0

54 16 LVecBase4f const 0 8832 16 LVecBase4f const 16 LVecBase4f const 0 0 55 0 0 0 0 0 0 0 0 0 0

55 10 LVecBase4f 0 2048 10 LVecBase4f 10 LVecBase4f 0 0 0 0 0 0 0 0 0 0 0 0 265
////////////////////////////////////////////////////////////////////
//       Class : LVecBase4
// Description : This is the base class for all three-component
//               vectors and points.
////////////////////////////////////////////////////////////////////

56 12 LVecBase4f * 0 8576 12 LVecBase4f * 12 LVecBase4f * 0 0 55 0 0 0 0 0 0 0 0 0 0

57 9 Texture * 0 8576 9 Texture * 9 Texture * 0 0 58 0 0 0 0 0 0 0 0 0 0

58 7 Texture 0 2048 7 Texture 7 Texture 0 0 0 0 0 0 0 0 0 0 0 0 1051
////////////////////////////////////////////////////////////////////
//       Class : Texture
// Description : Represents a texture object, which is typically a
//               single 2-d image but may also represent a 1-d or 3-d
//               texture image, or the six 2-d faces of a cube map
//               texture.
//
//               A texture's image data might be stored in system RAM
//               (see get_ram_image()) or its image may be represented
//               in texture memory on one or more
//               GraphicsStateGuardians (see prepare()), or both.  The
//               typical usage pattern is that a texture is loaded
//               from an image file on disk, which copies its image
//               data into system RAM; then the first time the texture
//               is rendered its image data is copied to texture
//               memory (actually, to the graphics API), and the
//               system RAM image is automatically freed.
////////////////////////////////////////////////////////////////////

59 5 float 0 8194 5 float 5 float 0 2 0 0 0 0 0 0 0 0 0 0 0

60 4 bool 0 8194 4 bool 4 bool 0 4 0 0 0 0 0 0 0 0 0 0 0

0
0
0
