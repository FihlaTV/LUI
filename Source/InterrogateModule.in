1409406023
2 2
3 LUI 4 jJ0G 3 LUI 
39
44 18 LUIAtlasDescriptor 0 4 83 38 LUIAtlasDescriptor::LUIAtlasDescriptor 0 1 1 0
45
LUIAtlasDescriptor::LUIAtlasDescriptor(void);

45 14 LUIAtlasPacker 0 4 85 30 LUIAtlasPacker::LUIAtlasPacker 0 1 2 0
41
LUIAtlasPacker::LUIAtlasPacker(int size);

46 13 find_position 0 4 85 29 LUIAtlasPacker::find_position 0 1 3 0
54
LVector2f LUIAtlasPacker::find_position(int w, int h);

47 7 LUINode 0 4 86 16 LUINode::LUINode 0 1 4 0
23
LUINode::LUINode(void);

48 15 get_atlas_image 0 4 86 24 LUINode::get_atlas_image 0 1 5 0
77
LUIAtlasDescriptor LUINode::get_atlas_image(basic_string< char > identifier);

49 13 attach_sprite 0 4 86 22 LUINode::attach_sprite 0 1 6 0
89
PointerTo< LUISprite > LUINode::attach_sprite(float x, float y, LUIAtlasDescriptor desc);

50 11 operator += 0 4 86 20 LUINode::operator += 0 1 7 0
53
void LUINode::operator +=(PointerTo< LUINode > node);

51 9 LUISprite 0 4 87 20 LUISprite::LUISprite 0 1 8 0
27
LUISprite::LUISprite(void);

52 7 set_pos 0 4 87 18 LUISprite::set_pos 0 2 9 10 64
// Setter / Getter 
// Position

// Setter / Getter 
// Position
102
inline void LUISprite::set_pos(LPoint2f const &pos);
inline void LUISprite::set_pos(float x, float y);

53 5 set_x 0 4 87 16 LUISprite::set_x 0 1 11 0
38
inline void LUISprite::set_x(float x);

54 5 set_y 0 4 87 16 LUISprite::set_y 0 1 12 0
38
inline void LUISprite::set_y(float y);

55 5 get_x 0 4 87 16 LUISprite::get_x 0 1 13 0
36
inline float LUISprite::get_x(void);

56 5 get_y 0 4 87 16 LUISprite::get_y 0 1 14 0
36
inline float LUISprite::get_y(void);

57 7 get_pos 0 4 87 18 LUISprite::get_pos 0 1 15 0
41
inline LPoint2f LUISprite::get_pos(void);

58 8 set_size 0 4 87 19 LUISprite::set_size 0 2 16 17 16
// Size

// Size
106
inline void LUISprite::set_size(LVector2f const &size);
inline void LUISprite::set_size(float w, float h);

59 9 set_width 0 4 87 20 LUISprite::set_width 0 1 18 0
42
inline void LUISprite::set_width(float w);

60 10 set_height 0 4 87 21 LUISprite::set_height 0 1 19 0
43
inline void LUISprite::set_height(float h);

61 9 get_width 0 4 87 20 LUISprite::get_width 0 1 20 0
40
inline float LUISprite::get_width(void);

62 10 get_height 0 4 87 21 LUISprite::get_height 0 1 21 0
41
inline float LUISprite::get_height(void);

63 8 get_size 0 4 87 19 LUISprite::get_size 0 1 22 0
56
inline LVector2f const &LUISprite::get_size(void) const;

64 18 set_texcoord_start 0 4 87 29 LUISprite::set_texcoord_start 0 2 23 24 24
// Texcoord

// Texcoord
136
inline void LUISprite::set_texcoord_start(LVector2f const &texcoord_start);
inline void LUISprite::set_texcoord_start(float u, float v);

65 18 get_texcoord_start 0 4 87 29 LUISprite::get_texcoord_start 0 1 25 0
53
inline LVector2f LUISprite::get_texcoord_start(void);

66 16 set_texcoord_end 0 4 87 27 LUISprite::set_texcoord_end 0 2 26 27 0
130
inline void LUISprite::set_texcoord_end(LVector2f const &texcoord_end);
inline void LUISprite::set_texcoord_end(float u, float v);

67 16 get_texcoord_end 0 4 87 27 LUISprite::get_texcoord_end 0 1 28 0
51
inline LVector2f LUISprite::get_texcoord_end(void);

68 9 set_color 0 4 87 20 LUISprite::set_color 0 2 29 30 18
// Color

// Color
128
inline void LUISprite::set_color(LVecBase4f const &color);
inline void LUISprite::set_color(float r, float g, float b, float a);

69 9 get_color 0 4 87 20 LUISprite::get_color 0 1 31 0
45
inline LVecBase4f LUISprite::get_color(void);

70 11 set_texture 0 4 87 22 LUISprite::set_texture 0 1 32 10
// Texture
49
inline void LUISprite::set_texture(Texture *tex);

71 11 get_texture 0 4 87 22 LUISprite::get_texture 0 1 33 10
// Texture
51
inline Texture *LUISprite::get_texture(void) const;

72 11 set_z_index 0 4 87 22 LUISprite::set_z_index 0 1 34 10
// Z-Index
50
inline void LUISprite::set_z_index(float z_index);

73 11 get_z_index 0 4 87 22 LUISprite::get_z_index 0 1 35 10
// Z-Index
42
inline float LUISprite::get_z_index(void);

74 11 set_visible 0 4 87 22 LUISprite::set_visible 0 1 36 10
// Visible
49
inline void LUISprite::set_visible(bool visible);

75 10 is_visible 0 4 87 21 LUISprite::is_visible 0 1 37 10
// Visible
40
inline bool LUISprite::is_visible(void);

76 4 hide 0 4 87 15 LUISprite::hide 0 1 38 0
34
inline void LUISprite::hide(void);

77 4 show 0 4 87 15 LUISprite::show 0 1 39 0
34
inline void LUISprite::show(void);

78 7 LUIRoot 0 4 88 16 LUIRoot::LUIRoot 0 1 40 0
23
LUIRoot::LUIRoot(void);

79 8 ~LUIRoot 0 4 88 17 LUIRoot::~LUIRoot 0 0 0
24
LUIRoot::~LUIRoot(void);

80 13 attach_sprite 0 4 88 22 LUIRoot::attach_sprite 0 1 41 0
89
PointerTo< LUISprite > LUIRoot::attach_sprite(float x, float y, LUIAtlasDescriptor desc);

81 11 operator += 0 4 88 20 LUIRoot::operator += 0 1 42 0
53
void LUIRoot::operator +=(PointerTo< LUINode > node);

82 10 load_atlas 0 4 88 19 LUIRoot::load_atlas 0 1 43 0
152
void LUIRoot::load_atlas(basic_string< char > const &atlas_id, basic_string< char > const &atlas_desc_path, basic_string< char > const &atlas_tex_path);

43
1 14 Dtool_jJ0G8xhK 0 7 3 89 0 14 Dtool_jJ0G8xhK 0 0 
2 14 Dtool_jJ0GL9zA 0 7 5 91 0 14 Dtool_jJ0GL9zA 0 1 4 size 1 90  
3 14 Dtool_jJ0G8x4_ 0 7 6 93 0 14 Dtool_jJ0G8x4_ 0 3 4 this 3 91  1 w 1 90  1 h 1 90  
4 14 Dtool_jJ0G3T7O 0 7 8 94 0 14 Dtool_jJ0G3T7O 0 0 
5 14 Dtool_jJ0G0SVM 0 7 9 89 0 14 Dtool_jJ0G0SVM 0 2 4 this 3 94  10 identifier 1 95  
6 14 Dtool_jJ0GaylZ 0 7 10 97 0 14 Dtool_jJ0GaylZ 0 4 4 this 3 94  1 x 1 96  1 y 1 96  4 desc 1 89  
7 14 Dtool_jJ0GKeO5 0 7 11 94 0 14 Dtool_jJ0GKeO5 0 2 4 this 3 94  4 node 1 94  
8 14 Dtool_jJ0G0beO 0 7 13 97 0 14 Dtool_jJ0G0beO 0 0 
9 14 Dtool_jJ0GTnVb 0 4 14 101 0 14 Dtool_jJ0GTnVb 31 // Setter / Getter 
// Position 2 4 this 3 97  3 pos 1 98  
10 14 Dtool_jJ0GAvgp 0 4 14 101 0 14 Dtool_jJ0GAvgp 31 // Setter / Getter 
// Position 3 4 this 3 97  1 x 1 96  1 y 1 96  
11 14 Dtool_jJ0Gqd_o 0 4 15 101 0 14 Dtool_jJ0Gqd_o 0 2 4 this 3 97  1 x 1 96  
12 14 Dtool_jJ0GStJp 0 4 16 101 0 14 Dtool_jJ0GStJp 0 2 4 this 3 97  1 y 1 96  
13 14 Dtool_jJ0GbRKp 0 6 17 96 0 14 Dtool_jJ0GbRKp 0 1 4 this 3 97  
14 14 Dtool_jJ0GTAUp 0 6 18 96 0 14 Dtool_jJ0GTAUp 0 1 4 this 3 97  
15 14 Dtool_jJ0Gs6Ij 0 7 19 102 0 14 Dtool_jJ0Gs6Ij 0 1 4 this 3 97  
16 14 Dtool_jJ0GDSuu 0 4 20 101 0 14 Dtool_jJ0GDSuu 7 // Size 2 4 this 3 97  4 size 1 103  
17 14 Dtool_jJ0G8DXk 0 4 20 101 0 14 Dtool_jJ0G8DXk 7 // Size 3 4 this 3 97  1 w 1 96  1 h 1 96  
18 14 Dtool_jJ0GScMs 0 4 21 101 0 14 Dtool_jJ0GScMs 0 2 4 this 3 97  1 w 1 96  
19 14 Dtool_jJ0GtpzG 0 4 22 101 0 14 Dtool_jJ0GtpzG 0 2 4 this 3 97  1 h 1 96  
20 14 Dtool_jJ0GEQxw 0 6 23 96 0 14 Dtool_jJ0GEQxw 0 1 4 this 3 97  
21 14 Dtool_jJ0Ghcak 0 6 24 96 0 14 Dtool_jJ0Ghcak 0 1 4 this 3 97  
22 14 Dtool_jJ0G_Emi 0 6 25 103 0 14 Dtool_jJ0G_Emi 0 1 4 this 3 105  
23 14 Dtool_jJ0GZPqC 0 4 26 101 0 14 Dtool_jJ0GZPqC 11 // Texcoord 2 4 this 3 97  14 texcoord_start 1 103  
24 14 Dtool_jJ0GN_OZ 0 4 26 101 0 14 Dtool_jJ0GN_OZ 11 // Texcoord 3 4 this 3 97  1 u 1 96  1 v 1 96  
25 14 Dtool_jJ0Gmg_s 0 7 27 93 0 14 Dtool_jJ0Gmg_s 0 1 4 this 3 97  
26 14 Dtool_jJ0G1aLq 0 4 28 101 0 14 Dtool_jJ0G1aLq 0 2 4 this 3 97  12 texcoord_end 1 103  
27 14 Dtool_jJ0Gpyol 0 4 28 101 0 14 Dtool_jJ0Gpyol 0 3 4 this 3 97  1 u 1 96  1 v 1 96  
28 14 Dtool_jJ0GbKPb 0 7 29 93 0 14 Dtool_jJ0GbKPb 0 1 4 this 3 97  
29 14 Dtool_jJ0GjsUJ 0 4 30 101 0 14 Dtool_jJ0GjsUJ 8 // Color 2 4 this 3 97  5 color 1 107  
30 14 Dtool_jJ0G0obL 0 4 30 101 0 14 Dtool_jJ0G0obL 8 // Color 5 4 this 3 97  1 r 1 96  1 g 1 96  1 b 1 96  1 a 1 96  
31 14 Dtool_jJ0GZ92J 0 7 31 110 0 14 Dtool_jJ0GZ92J 0 1 4 this 3 97  
32 14 Dtool_jJ0GBbSG 0 4 32 101 0 14 Dtool_jJ0GBbSG 10 // Texture 2 4 this 3 97  3 tex 1 111  
33 14 Dtool_jJ0GAHju 0 7 33 111 0 14 Dtool_jJ0GAHju 10 // Texture 1 4 this 3 105  
34 14 Dtool_jJ0G0CvJ 0 4 34 101 0 14 Dtool_jJ0G0CvJ 10 // Z-Index 2 4 this 3 97  7 z_index 1 96  
35 14 Dtool_jJ0GQj7I 0 6 35 96 0 14 Dtool_jJ0GQj7I 10 // Z-Index 1 4 this 3 97  
36 14 Dtool_jJ0Gzi7K 0 4 36 101 0 14 Dtool_jJ0Gzi7K 10 // Visible 2 4 this 3 97  7 visible 1 113  
37 14 Dtool_jJ0GCgZS 0 6 37 113 0 14 Dtool_jJ0GCgZS 10 // Visible 1 4 this 3 97  
38 14 Dtool_jJ0Ga9z_ 0 4 38 101 0 14 Dtool_jJ0Ga9z_ 0 1 4 this 3 97  
39 14 Dtool_jJ0GYuHT 0 4 39 101 0 14 Dtool_jJ0GYuHT 0 1 4 this 3 97  
40 14 Dtool_jJ0Gxl7v 0 7 41 114 79 14 Dtool_jJ0Gxl7v 0 0 
41 14 Dtool_jJ0GZszv 0 7 43 97 0 14 Dtool_jJ0GZszv 0 4 4 this 3 114  1 x 1 96  1 y 1 96  4 desc 1 89  
42 14 Dtool_jJ0Gs8cP 0 6 44 114 0 14 Dtool_jJ0Gs8cP 0 2 4 this 3 114  4 node 1 94  
43 14 Dtool_jJ0GqqfO 0 4 45 101 0 14 Dtool_jJ0GqqfO 0 4 4 this 3 114  8 atlas_id 1 95  15 atlas_desc_path 1 95  14 atlas_tex_path 1 95  
32
83 18 LUIAtlasDescriptor 0 75777 18 LUIAtlasDescriptor 18 LUIAtlasDescriptor 0 0 0 1 44 0 0 0 0 0 1 0 84 0 0 0 0 0

84 14 ReferenceCount 0 2049 14 ReferenceCount 14 ReferenceCount 0 0 0 0 0 0 0 0 0 0 0 0 425
////////////////////////////////////////////////////////////////////
//       Class : ReferenceCount
// Description : A base class for all things that want to be
//               reference-counted.  ReferenceCount works in
//               conjunction with PointerTo to automatically delete
//               objects when the last pointer to them goes away.
////////////////////////////////////////////////////////////////////

85 14 LUIAtlasPacker 0 75777 14 LUIAtlasPacker 14 LUIAtlasPacker 0 0 0 1 45 0 0 1 46 0 0 1 0 84 0 0 0 0 0

86 7 LUINode 0 75777 7 LUINode 7 LUINode 0 0 0 1 47 0 0 3 48 49 50 0 0 1 0 84 0 0 0 0 0

87 9 LUISprite 0 75777 9 LUISprite 9 LUISprite 0 0 0 1 51 0 0 26 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 0 0 1 0 84 0 0 0 0 371
////////////////////////////////////////////////////////////////////
//       Class : LUISprite
// Description : A LUISprite stores a single card, including position,
//               scale, and uv coordinates. It also notifies the
//               LUIVertexPool when any scalar or texture got changed.
////////////////////////////////////////////////////////////////////

88 7 LUIRoot 0 26625 7 LUIRoot 7 LUIRoot 0 0 0 1 78 79 0 3 80 81 82 0 0 0 0 0 0

89 20 LUIAtlasDescriptor * 0 8576 20 LUIAtlasDescriptor * 20 LUIAtlasDescriptor * 0 0 83 0 0 0 0 0 0 0 0 0 0

90 3 int 0 8194 3 int 3 int 0 1 0 0 0 0 0 0 0 0 0 0 0

91 16 LUIAtlasPacker * 0 8576 16 LUIAtlasPacker * 16 LUIAtlasPacker * 0 0 85 0 0 0 0 0 0 0 0 0 0

92 9 LVector2f 0 2048 9 LVector2f 9 LVector2f 0 0 0 0 0 0 0 0 0 0 0 0 707
// Filename: lvector2_src.h
// Created by:  drose (08Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//       Class : LVector2
// Description : This is a two-component vector offset.
////////////////////////////////////////////////////////////////////

93 11 LVector2f * 0 8576 11 LVector2f * 11 LVector2f * 0 0 92 0 0 0 0 0 0 0 0 0 0

94 9 LUINode * 0 8576 9 LUINode * 9 LUINode * 0 0 86 0 0 0 0 0 0 0 0 0 0

95 13 atomic string 0 2 13 atomic string 13 atomic string 0 7 0 0 0 0 0 0 0 0 0 0 0

96 5 float 0 8194 5 float 5 float 0 2 0 0 0 0 0 0 0 0 0 0 0

97 11 LUISprite * 0 8576 11 LUISprite * 11 LUISprite * 0 0 87 0 0 0 0 0 0 0 0 0 0

98 16 LPoint2f const * 0 8576 16 LPoint2f const * 16 LPoint2f const * 0 0 99 0 0 0 0 0 0 0 0 0 0

99 14 LPoint2f const 0 8832 14 LPoint2f const 14 LPoint2f const 0 0 100 0 0 0 0 0 0 0 0 0 0

100 8 LPoint2f 0 2048 8 LPoint2f 8 LPoint2f 0 0 0 0 0 0 0 0 0 0 0 0 706
// Filename: lpoint2_src.h
// Created by:  drose (08Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//       Class : LPoint2
// Description : This is a two-component point in space.
////////////////////////////////////////////////////////////////////

101 4 void 0 8194 4 void 4 void 0 6 0 0 0 0 0 0 0 0 0 0 0

102 10 LPoint2f * 0 8576 10 LPoint2f * 10 LPoint2f * 0 0 100 0 0 0 0 0 0 0 0 0 0

103 17 LVector2f const * 0 8576 17 LVector2f const * 17 LVector2f const * 0 0 104 0 0 0 0 0 0 0 0 0 0

104 15 LVector2f const 0 8832 15 LVector2f const 15 LVector2f const 0 0 92 0 0 0 0 0 0 0 0 0 0

105 17 LUISprite const * 0 8576 17 LUISprite const * 17 LUISprite const * 0 0 106 0 0 0 0 0 0 0 0 0 0

106 15 LUISprite const 0 8832 15 LUISprite const 15 LUISprite const 0 0 87 0 0 0 0 0 0 0 0 0 0

107 18 LVecBase4f const * 0 8576 18 LVecBase4f const * 18 LVecBase4f const * 0 0 108 0 0 0 0 0 0 0 0 0 0

108 16 LVecBase4f const 0 8832 16 LVecBase4f const 16 LVecBase4f const 0 0 109 0 0 0 0 0 0 0 0 0 0

109 10 LVecBase4f 0 2048 10 LVecBase4f 10 LVecBase4f 0 0 0 0 0 0 0 0 0 0 0 0 265
////////////////////////////////////////////////////////////////////
//       Class : LVecBase4
// Description : This is the base class for all three-component
//               vectors and points.
////////////////////////////////////////////////////////////////////

110 12 LVecBase4f * 0 8576 12 LVecBase4f * 12 LVecBase4f * 0 0 109 0 0 0 0 0 0 0 0 0 0

111 9 Texture * 0 8576 9 Texture * 9 Texture * 0 0 112 0 0 0 0 0 0 0 0 0 0

112 7 Texture 0 2048 7 Texture 7 Texture 0 0 0 0 0 0 0 0 0 0 0 0 1051
////////////////////////////////////////////////////////////////////
//       Class : Texture
// Description : Represents a texture object, which is typically a
//               single 2-d image but may also represent a 1-d or 3-d
//               texture image, or the six 2-d faces of a cube map
//               texture.
//
//               A texture's image data might be stored in system RAM
//               (see get_ram_image()) or its image may be represented
//               in texture memory on one or more
//               GraphicsStateGuardians (see prepare()), or both.  The
//               typical usage pattern is that a texture is loaded
//               from an image file on disk, which copies its image
//               data into system RAM; then the first time the texture
//               is rendered its image data is copied to texture
//               memory (actually, to the graphics API), and the
//               system RAM image is automatically freed.
////////////////////////////////////////////////////////////////////

113 4 bool 0 8194 4 bool 4 bool 0 4 0 0 0 0 0 0 0 0 0 0 0

114 9 LUIRoot * 0 8576 9 LUIRoot * 9 LUIRoot * 0 0 88 0 0 0 0 0 0 0 0 0 0

0
0
0
